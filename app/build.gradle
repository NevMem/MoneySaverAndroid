plugins {
    id "de.undercouch.download" version "4.0.0"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    buildToolsVersion '28.0.3'
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.nevmem.moneysaver"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 24
        versionName "1.1.5"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (System.env.SIGN_APP != null) {
                storeFile file(System.env.RELEASE_SIGNING_KEY_FILE)
                storePassword System.env.RELEASE_SIGN_PASSWORD
                keyAlias System.env.RELEASE_SIGN_KEY_ALIAS
                keyPassword System.env.RELEASE_SIGN_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (System.env.SIGN_APP != null) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':common')
    implementation project(':ui')
    implementation project(':network')
    implementation project(':auth')
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0-alpha01'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
    implementation 'com.google.dagger:dagger:2.21'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha07'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-RC'

    // RxJava
    implementation "io.reactivex.rxjava3:rxjava:3.0.0-RC3"

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.robolectric:robolectric:3.0'
    testImplementation 'org.json:json:20180813'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    /* Room */
    def room_version = "2.1.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    kapt 'com.google.dagger:dagger-android-processor:2.21'
    kapt 'com.google.dagger:dagger-compiler:2.21'

    kaptTest 'com.google.dagger:dagger-compiler:2.21'
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.21'

    androidTestImplementation 'android.arch.core:core-testing:1.1.1'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.0.1'

    // Analytics
    implementation 'com.google.firebase:firebase-analytics:17.0.1'

    // Crashlytics
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
}

apply plugin: 'com.google.gms.google-services'

task googleServicesJsonResolver {
    def fileName = 'app/google-services.json'
    def jsonFile = new File(fileName)
    if (jsonFile.exists()) {
        println("google-services.json file is FOUND")
    } else {
        println("google-services.json file is NOT FOUND")
        if (System.env.GOOGLE_SERVICES_JSON_FILE_PATH == null)
            throw IllegalStateException("GOOGLE_SERVICES_JSON_FILE_PATH is not set cannot proceed copy task")
        copy {
            from System.env.GOOGLE_SERVICES_JSON_FILE_PATH
            into './'
        }
        println("LOADED")
    }
}